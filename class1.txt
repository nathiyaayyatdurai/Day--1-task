//DAY1

 //HTTP1.1
It supports connection reuse i.e. for every TCP connection there could be multiple requests and responses, and pipelining where the client can request several resources from the server at once. However, pipelining was hard to implement due to issues such as head-of-line blocking and was not a feasible solution.

 //HTTP2
Uses multiplexing, where over a single TCP connection resources to be delivered are interleaved and arrive at the client almost at the same time. It is done using streams which can be prioritized, can have dependencies and individual flow control. It also provides a feature called server push that allows the server to send data that the client will need but has not yet requested


//objects and its internal representation in Javascript	


1. Objects are complex and each object may contain a combination of primitive data-types as well as reference data-types.
2. An object is a reference data type. Variables that are assigned a reference value are given a reference or a pointer to that value. 
3. That reference or pointer points to the location in memory where the object is stored. The variables don’t actually store the value.
4. Otherway around, objects in JavaScript may be defined as an unordered collection of related data, of primitive or reference types, in the form of “key: value” pairs. 
5. These keys can be variables or functions and are called properties and methods, respectively, in the context of an object.
6. An object can be created with figure brackets {} with an optional list of properties. A property is a “key: value” pair, where a key is the property name value can be anything.

